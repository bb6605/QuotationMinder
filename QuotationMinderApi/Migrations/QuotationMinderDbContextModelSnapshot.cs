// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuotationMinderApi.Data;

#nullable disable

namespace QuotationMinderApi.Migrations
{
    [DbContext(typeof(QuotationMinderDbContext))]
    partial class QuotationMinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuotationMinderApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.AuthorCategory", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuthorCategories");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.QuotationAuthor", b =>
                {
                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("QuotationId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("QuotationAuthors");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.QuotationCategory", b =>
                {
                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("QuotationId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("QuotationCategories");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.AuthorCategory", b =>
                {
                    b.HasOne("QuotationMinderApi.Models.Author", "Author")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuotationMinderApi.Models.Category", "Category")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.QuotationAuthor", b =>
                {
                    b.HasOne("QuotationMinderApi.Models.Author", "Author")
                        .WithMany("QuotationAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuotationMinderApi.Models.Quotation", "Quotation")
                        .WithMany("QuotationAuthors")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.QuotationCategory", b =>
                {
                    b.HasOne("QuotationMinderApi.Models.Category", "Category")
                        .WithMany("QuotationCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuotationMinderApi.Models.Quotation", "Quotation")
                        .WithMany("QuotationCategories")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.Author", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("QuotationAuthors");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.Category", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("QuotationCategories");
                });

            modelBuilder.Entity("QuotationMinderApi.Models.Quotation", b =>
                {
                    b.Navigation("QuotationAuthors");

                    b.Navigation("QuotationCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
